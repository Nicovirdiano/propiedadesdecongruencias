   PROPIEDADES DE CONGRUENCIA
   
   A‚â°B(m) -> A-B(M)
   
   A‚â°B(m) ->
   C‚â°D(m) -> A+C‚â°B+D(m)  <->  A-C‚â°B-D(m) <-> A*C‚â°B*D(m)
   
   Si A‚â°B(m) para ‚àÄD se cumple que A+D‚â°B+D(m) <-> A*D‚â°B*D(m)
   ---------------------------------------------------------------------------------------
    EXPONENCIACI√ìN MODULAR
    
    El residuo se puede calcular ->     R = X^N(m)
    de esta formula se puede deducir:   R+K*m = X^N 
    
                                                    Ej. numerico: 6 = 5^3(mod.7)
                                                                  6 =125(mod.7)
                                                                  6+7*K = 125
   ---------------------------------------------------------------------------------------
   CALCULO DEL MODULO EN FORMA EFICIENTE 
    
   Retomando el ejemplo anterior ->                             
                                                                    R = X^N(m)  
   se mejora la eficiencia formulandolo de esta forma:   
                                             
                                                         Si N es par   -> X^N = (X*X)^N/2
                                                         
                                                         Si N es impar -> X^N = X(X*X)^N/2
   ----------------------------------------------------------------------------------------- 
   FUNCION RECURSIVA
   
   Pseudocodigo
   power(x, n, p) {

si(n == 0) {

retornar 1

            }

 tmp = power( (x*x) % p, n/2, p) 

si(n%2 != 0) { 

tmp = (tmp * x) % p 

}

 retornar tmp

 }
 
 ############################################Codigo en Python##########################################################################
 
 def power(x, n, p):
    if n == 0:
        return 1
    tmp = power((x*x) % p, n//2, p)
    if n % 2 != 0:
        tmp = (tmp * x) % p
    return tmp
    
 ###########################################Ejecuci√≥n##################################################################################
                     power(3, 2, 4)
    |
    |-> n == 0? No
    |-> tmp = power((3*3) % 4, 2/2, 4)
    |       |
    |       |-> power(1, 1, 4)
    |       |   |
    |       |   |-> n == 0? No
    |       |   |-> tmp = power((1*1) % 4, 1/2, 4)
    |       |   |   |
    |       |   |   |-> power(1, 0, 4)
    |       |   |   |   |
    |       |   |   |   |-> n == 0? S√≠
    |       |   |   |   |-> retornar 1
    |       |
    |       |
    |       |
    |
    |
    |
    |
    |
    |
En esta representaci√≥n visual, cada llamada recursiva a la funci√≥n power se representa como una rama que se extiende hacia la derecha.
Cada vez que se llama a la funci√≥n power de manera recursiva, se crea una nueva rama que se extiende hacia la derecha. Cuando se alcanza
el caso base y se retorna 1, la rama termina y se vuelve a subir por el √°rbol de llamadas recursivas hasta llegar a la llamada original a power(3, 2, 4).

power(3, 2, 4)
|-> n == 0? No
|-> tmp = power((3*3) % 4, 2/2, 4)
|   |-> power(1, 1, 4)
|   |   |-> n == 0? No
|   |   |-> tmp = power((1*1) % 4, 1/2, 4)
|   |   |   |-> power(1, 0, 4)
|   |   |   |   |-> n == 0? S√≠
|   |   |   |   |-> retornar 1
|   |   |-> tmp = 1
|   |   |-> n%2 != 0? S√≠
|   |   |-> tmp = (1 * 3) % 4
|   |-> retornar tmp = 3
|-> tmp = 3
|-> n%2 != 0? No
|-> retornar tmp = (3 * 3) % 4 = 1





Mismo ejemplo pero en forma iterativa:

def power(x, n, p):
    result = 1
    while n > 0:
        if n % 2 != 0:
            result = (result * x) % p
        x = (x * x) % p
        n = n // 2
    return result
    
    
En forma equematica:

power(3, 2, 4)
|-> result = 1
|-> n > 0? S√≠
|   |-> n % 2 != 0? No
|   |-> x = (3 * 3) % 4 = 1
|   |-> n = 2 // 2 = 1
|-> n > 0? S√≠
|   |-> n % 2 != 0? S√≠
|   |-> result = (1 * 3) % 4 = 3
|   |-> x = (1 * 1) % 4 = 1
|   |-> n = 1 // 2 = 0
|-> n > 0? No
|-> retornar result = (3 * 3) % p = (9) % p = (9) % (4) = (9 modulo 4) = (1)
--------------------------------------------------------------------------------------------------------------------------------------
    
Maximo comun divisor
 Es el valor que resulta de la multiplicaci√≥n de los mayores factores primos entre dos numeros 
 
 Ej. numerico: mcd(30,24)
                             30 | 2          24 | 2
                             15 | 3          12 | 2
                              5 | 5           6 | 2
                              1 |             3 | 3
                                              1 | 
                                              
                                              
 En este ejemplo los factores comunes serian 2 * 3 con resultado de mcd=6
 
 Se dice que:    (A,B)‚â°mcd(A-B, B)
 
 Lo que quiere decir es que si tengo un numero D que es divisor com√∫n de (A,B) con residuo 0,  tambien lo sera de (A-B, B).
 Esta propiedad se puede demostrar con el algoritmo de Euclides....
 
 mcd(30, 24)
mcd(24, 30 % 24) = mcd(24, 6)
mcd(6, 24 % 6) = mcd(6, 0)
mcd(6, 0) = 6
Esto no es eficiente por el gran numeros de restas que se deberia realizar en numeros grandes por lo tanto una forma mas eficiente seria:
 Pseudocodigo
 
 mcd(a,b) { 

si (b == 0) {

 retornar a 

}

 sino { 

retornar mcd(b, a%b) 

}

 }
 
 
---------------------------------------------------------------------- 
 Forma esquematica 
 
 mcd(30, 24)
    |
    +-- b != 0
    |
    +-- mcd(24, 30 % 24) = mcd(24, 6)
            |
            +-- b != 0
            |
            +-- mcd(6, 24 % 6) = mcd(6, 0)
                    |
                    +-- b == 0
                    |
                    +-- return a = 6
 
 
####################################################################### Codigo en Python ######################################################################
 def mcd(a, b):
    if b == 0:
        return a
    else:
        return mcd(b, a % b)
 ---------------------------------------------------------------------------------------------------------------------------------------------------------------
 Inverso mutiplicativo
 
 El inverso multiplicativo de A m√≥dulo N es un n√∫mero X tal que cuando se multiplica A por X y se divide el resultado entre N, el residuo es igual a 1.
 
                                                ùê¥ùëã ‚â° 1 (mod ùëÅ)
 
 Si el mcd de A y N es igual a 1 es decir tienen que ser coprimos, entonces existe un √∫nico inverso multiplicativo de A m√≥dulo N en el rango 1 ‚â§ X < N.
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
   
